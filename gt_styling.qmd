---
title: "Basic gt Styling Reference"
format:
  html:
    theme:
      - flatly
      - custom.scss
    fontsize: 1.1em
    toc: true
---

```{r setup}
#| echo: false
#| message: false
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(gt)


peach <- "#f9bc9c"
yellow <- "#feef8f"
green <- "#9fd28d"
purple <- "#786895"

```

`gt` allows for extensive and precise table styling. This is a non-comprehensive quick reference to aid users in easily knowing the basic, common functions and arguments and what they do.

There are two basic styling functions: `tab_style` allows for custom styling of one or more cells and `tab_options` modifies the (150+ provided) options of a table. `gt` continues adding more specific stand-alone styling functions with `opt_*()`, which can be found in its [documentation](https://gt.rstudio.com/index.html).

# `tab_style(gt, style, locations)`

## style =

### `cell_text()`

```{r ctext_df}

c <- c(a = "color =", b = "\"wheat\"", c = "\"#9fd28d\"", d = "peach")
f <- c(a = "font =", b = "google_fonts(name = \"Merriweather\")", c = "\"Garamond\"", d = "\"sans-serif\"", e = "default_fonts()")
si <- c(a = "size =", b = "px(8)", c = "\"14px\"", d = "\"xx-small\"", e = "\"x-large\"")
a <- c(a = "align =", b = "\"center\"", c = "\"left\"", d = "\"right\"", e = "\"justify\"") 
v <- c(a = "valign =", b = "\"middle\"", c = "\"top\"", d = "\"bottom\"")
st <- c(a = "style =", b = "\"normal\"", c = "\"italic\"", d = "\"oblique\"")
w <- c(a = "weight =", b = "\"bold\"", c = "\"lighter\"", d = "\"bolder\"", e = "800")
d <- c(a = "decorate =", b = "\"line-through\"", c = "\"underline\"", d = "\"overline\"", e = "\"underline overline\"")
t <- c(a = "transform =", b = "\"uppercase\"", c = "\"lowercase\"", d = "\"capitalize\"")
i <- c(a = "indent =", b = "px(15)", c = "\"25px\"", d = "pct(10)")


c_text <- bind_rows(c,f,si,a,v,st,w,d,t,i) %>% 
  mutate(across(everything(), ~ replace_na(., "")))

```

:::{.callout-tip}
## Tip
Give your hex codes names for easier coding: `peach <- "#f9bc9c"` & `cell_border(color = peach)`
:::

```{r ctext_gt}
#| results: asis

c_text %>% 
  gt(rowname_col = "a", id = "ctext") %>% 
  tab_options(
    column_labels.hidden = TRUE,
    table_body.hlines.color = peach,
    table_body.hlines.width = "1px",
    stub.border.color = green,
    table_body.border.top.color = purple,
    table_body.border.bottom.color = purple,
    table.border.bottom.color = purple,
    data_row.padding = "2px"
  ) %>%
  opt_table_font(font = google_font(name = "Roboto")) %>% 
  cols_width(everything() ~ "150px") %>% 
  tab_footnote(
    footnote = "See above callout tip.",
    locations = cells_body(columns = 4, rows = 1)
  ) %>% 
  tab_footnote(
    footnote = "Number from 1-1000 - only with variable fonts.",
    locations = cells_body(columns = 5, rows = 7)
  ) %>% 
  tab_footnote(
    footnote = "Code must be written in lowercase - example here shows the output.",
    locations = list(cells_body(columns = 2, rows = 9),
                     cells_body(columns = 4, rows = 9))
  ) %>% 
  tab_style(
    locations = cells_stub(),
    style = cell_text(align = "right")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 2, rows = 1),
    style = cell_text(color = "wheat", weight = "bold")
  ) %>%
  tab_style(
    locations = cells_body(columns = 3, rows = 1),
    style = cell_text(color = "#9fd28d", weight = "bold")
  ) %>%
  tab_style(
    locations = cells_body(columns = 2, rows = 2),
    style = cell_text(font = google_font(name = "Merriweather"), size = "8px")
  ) %>%
  tab_style(
    locations = cells_body(columns = 3, rows = 2),
    style = cell_text(font = "Garamond")
  ) %>%
  tab_style(
    locations = cells_body(columns = 4, rows = 2),
    style = cell_text(font = "sans-serif")
  ) %>%
  tab_style(
    locations = cells_body(columns = 4, rows = 2),
    style = cell_text(font = default_fonts())
  ) %>%
  tab_style(
    locations = cells_body(columns = 2, rows = 3),
    style = cell_text(size = px(8))
  ) %>%
  tab_style(
    locations = cells_body(columns = 3, rows = 3),
    style = cell_text(size = "14px")
  ) %>%
  tab_style(
    locations = cells_body(columns = 4, rows = 3),
    style = cell_text(size = "xx-small")
  ) %>%
  tab_style(
    locations = cells_body(columns = 5, rows = 3),
    style = cell_text(size = "x-large")
  ) %>%
  tab_style(
    locations = cells_body(columns = 2, rows = 4),
    style = cell_text(align = "center")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 3, rows = 4),
    style = cell_text(align = "left")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 4, rows = 4),
    style = cell_text(align = "right")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 5, rows = 4),
    style = cell_text(align = "justify")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 2, rows = 5),
    style = cell_text(v_align = "middle")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 3, rows = 5),
    style = cell_text(v_align = "top")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 4, rows = 5),
    style = cell_text(v_align = "bottom")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 2, rows = 6),
    style = cell_text(style = "normal")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 3, rows = 6),
    style = cell_text(style = "italic")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 4, rows = 6),
    style = cell_text(style = "oblique")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 2, rows = 7),
    style = cell_text(weight = "bold")
  ) %>%
  tab_style(
    locations = cells_body(columns = 3, rows = 7),
    style = cell_text(weight = "lighter")
  ) %>%
  tab_style(
    locations = cells_body(columns = 4, rows = 7),
    style = cell_text(weight = "bolder")
  ) %>%
  tab_style(
    locations = cells_body(columns = 5, rows = 7),
    style = cell_text(weight = 800, align = "left")
  ) %>%
  tab_style(
    locations = cells_body(columns = 2, rows = 8),
    style = cell_text(decorate = "line-through")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 3, rows = 8),
    style = cell_text(decorate = "underline")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 4, rows = 8),
    style = cell_text(decorate = "overline")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 5, rows = 8),
    style = cell_text(decorate = "underline overline")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 2, rows = 9),
    style = cell_text(transform = "uppercase")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 3, rows = 9),
    style = cell_text(transform = "lowercase")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 4, rows = 9),
    style = cell_text(transform = "capitalize")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 2, rows = 10),
    style = cell_text(indent = px(15))
  ) %>% 
  tab_style(
    locations = cells_body(columns = 3, rows = 10),
    style = cell_text(indent = "25px")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 4, rows = 10),
    style = cell_text(indent = pct(10))
  ) %>% 
  opt_css(
    css = "
    #ctext .gt_row {
     height: 50px; 
     border-bottom-style: none;
    }") 
```


### `cell_borders()`

```{r cborder_df}

bsi <- c(n = "sides =", a = "\"left\"", b = "\"right\"", c = "\"top\"", d = "c(\"top\", \"bottom\")", e = "\"all\"")
bc <- c(n = "color =", a = "\"wheat\"", b = "\"#9fd28d\"")
bst <- c(n = "style =", a = "\"solid\"", b = "\"dashed\"", c = "\"dotted\"", d = "\"hidden\"")
bw <- c(n = "weight =", a = "1", b = "px(2)", c = "\"3px\"", d = "px(4)", e = "\"5px\"")

c_borders <- bind_rows(bsi, bc, bst, bw) %>%
  mutate(across(everything(), ~ replace_na(., "")))
```

```{r cborder_gt}
#| results: asis

c_borders %>% 
  gt(id = "cborder", rowname_col = "n") %>% 
  tab_options(
    column_labels.hidden = TRUE,
    stub.border.width = "0px"
  ) %>% 
  opt_table_font(font = google_font(name = "Roboto")) %>% 
  tab_style(
    locations = cells_body(),
    style = cell_text(align = "center")
  ) %>% 
  tab_style(
    locations = cells_stub(),
    style = cell_text(align = "right")
  ) %>% 
  opt_css(
    css = "
    #cborder .gt_table {
    border-collapse: separate;
    border-top-style: none;
    border-bottom-style: none;
    }
    
    #cborder .gt_row {
    border-top-style: none;
    border-bottom-style: none;
    }"
  ) %>% 
  tab_style(
    locations = cells_body(columns = 2, rows = 1),
    style = cell_borders(sides = "left",
                         color = purple,
                         weight = "4px")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 3, rows = 1),
    style = cell_borders(sides = "right",
                         color = purple,
                         weight = "4px")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 4, rows = 1),
    style = cell_borders(sides = "top",
                         color = purple,
                         weight = "4px")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 5, rows = 1),
    style = cell_borders(sides = c("top", "bottom"),
                         color = purple,
                         weight = "4px")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 6, rows = 1),
    style = cell_borders(sides = "all",
                         color = purple,
                         weight = "4px")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 2, rows = 2),
    style = cell_borders(sides = "all",
                         color = "wheat",
                         weight = "4px")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 3, rows = 2),
    style = cell_borders(sides = "all",
                         color = "#9fd28d",
                         weight = "4px")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 2, rows = 3),
    style = cell_borders(sides = "bottom",
                         color = purple,
                         weight = "5px",
                         style = "solid")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 3, rows = 3),
    style = cell_borders(sides = "bottom",
                         color = purple,
                         weight = "5px",
                         style = "dashed")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 4, rows = 3),
    style = cell_borders(sides = "bottom",
                         color = purple,
                         weight = "5px",
                         style = "dotted")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 5, rows = 3),
    style = cell_borders(sides = "bottom",
                         color = purple,
                         weight = "5px",
                         style = NULL)
  ) %>% 
  tab_style(
    locations = cells_body(columns = 2, rows = 4),
    style = cell_borders(sides = "bottom",
                         color = purple,
                         weight = "1px")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 3, rows = 4),
    style = cell_borders(sides = "bottom",
                         color = purple,
                         weight = "2px")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 4, rows = 4),
    style = cell_borders(sides = "bottom",
                         color = purple,
                         weight = "3px")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 5, rows = 4),
    style = cell_borders(sides = "bottom",
                         color = purple,
                         weight = "4px")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 6, rows = 4),
    style = cell_borders(sides = "bottom",
                         color = purple,
                         weight = "5px")
  ) 
```

### `cell_fill()`

```{r cfill_df}
co <- c(a = "color =", b = "\"wheat\"", c = "\"#9fd28d\"")
al <- c(a = "alpha =", b = ".5", c = ".8")

cfill <- bind_rows(co, al)
```

```{r cfill_gt}
#| results: asis
#| layout-align: left

cfill %>% 
  gt(rowname_col = "a") %>% 
  tab_options(column_labels.hidden = TRUE,
              table_body.hlines.color = peach,
              stub.border.color = green,
              table_body.border.top.color = purple,
              table_body.border.top.width = "2px",
              table_body.border.bottom.color = purple,
              table.border.bottom.color = purple,
              table.width = "300px") %>% 
  tab_style(
    locations = cells_stub(),
    style = cell_text(align = "right")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 2, rows = 1),
    style = cell_fill(color = "wheat")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 3, rows = 1),
    style = cell_fill(color = "#9fd28d")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 2, rows = 2),
    style = cell_fill(color = yellow, alpha = .5)
  ) %>% 
  tab_style(
    locations = cells_body(columns = 3, rows = 2),
    style = cell_fill(color = yellow, alpha = .8)
  ) %>% 
  tab_style(
    locations = cells_body(),
    style = cell_text(align = "center")
  ) %>% 
  as_raw_html()
```

## locations =

```{r cells_df}

cl1 <- c("cells_stub(rows = 1)", rep("cells_stub()", length.out = 9))
cl2 <- c("cells_body(column = 2, row = 1)", rep("cells_body()", length.out = 9))
cl3 <- rep("cells_body()", length.out = 10)
cl4 <- rep("cells_body()", length.out = 10)
cl5 <- c(rep("cells_row_groups(groups = \"grp1\")", length.out = 5),
         rep("cells_row_groups(groups = \"grp2\")", length.out = 5))

c_locations <- tibble(cl1, cl2, cl3, cl4, cl5) %>%
  rename(ccl1 = cl1,
         ccl2 = cl2,
         ccl3 = cl3,
         ccl4 = cl4,
         ccl5 = cl5) %>% 
  group_by(ccl5)
```
Use one - or more with `list()` - of these to target cells.

```{r cells_gt}
#| results: asis
#| layout-align: left

c_locations %>% 
  gt(rowname_col = "ccl1", id = "cells") %>% 
  opt_table_font(font = google_font("Roboto")) %>% 
  tab_options(
    table.font.size = "15px",
    table.border.bottom.color = purple,
    table.border.top.color = purple,
    table_body.border.bottom.color = purple,
    table_body.border.bottom.style = "double",
    grand_summary_row.border.color = purple,
    summary_row.border.color = green,
    table_body.hlines.color = peach,
    stub.border.color = peach,
    row_group.border.bottom.color = green,
    row_group.border.top.color = green,
    heading.border.bottom.color = purple,
    source_notes.padding = "5px",
    footnotes.padding = "5px"
  ) %>% 
  tab_style(
    locations = cells_column_spanners(),
    style = cell_borders(sides = "bottom", color = green)
  ) %>% 
  tab_header(
    title = "cells_title(groups = \"title\")",
    subtitle = "cells_title(groups = \"subtitle\")"
  ) %>% 
  tab_spanner("cells_column_spanners(spanners = )", columns = 3:4) %>% 
  tab_stubhead("cells_stubhead()") %>% 
  tab_footnote(footnote = "cells_footnotes()") %>% 
  tab_source_note(source_note = "cells_source_notes()") %>% 
  summary_rows(columns = 2,
               fns = list("cells_stub_summary(groups = , rows = )" = ~html("<div style=\"height: 22px;\"></div><div>cells_summary(groups = , columns = , rows = )</div>")),
               formatter = fmt_markdown,
               groups = TRUE,
               missing_text = "") %>% 
  grand_summary_rows(columns = 2,
                     fns = list("cells_stub_grand_summary(rows = )" = ~html("<div style=\"height: 22px;\"></div><div>cells_grand_summary(columns = , rows = )</div>")),
                     formatter = fmt_markdown,
                     missing_text = "") %>%
  cols_width(
    ccl2 ~ "160px",
    everything() ~ "140px"
  ) %>% 
  cols_label(
    ccl2 = "cells_column_labels(columns = )",
    ccl3 = html("<div style=\"height: 20px;\"></div>"),
    ccl4 = ""
  ) %>% 
  tab_style(
    locations = cells_body(),
    style = cell_text(size = "10px")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 3:4),
    style = cell_text(align = "center")
  ) %>% 
  tab_style(
    locations = cells_stub(),
    style = cell_text(size = "11px", align = "right")
  ) %>% 
  tab_style(
    locations = list(cells_stub_summary(),
                     cells_stub_grand_summary()),
    style = cell_text(v_align = "top")
  ) %>% 
  tab_style(
    locations = list(cells_grand_summary(),
                     cells_stub_grand_summary(),
                     cells_summary(),
                     cells_stub_summary(),
                     cells_column_labels()),
    style = cell_text(whitespace = "nowrap")
  ) %>% 
  opt_css(
    css = "
    #cells .gt_grand_summary_row {
     overflow-x: visible; 
    }
    
    #cells .gt_summary_row {
     overflow-x: visible; 
    }
    
    #cells .gt_col_heading {
     overflow-x: visible; 
    }
    
    #cells .gt_column_spanner {
     border-bottom-style: solid;
     border-bottom-width: 2px;
     border-bottom-color: #9fd28d;
    }
    
    #cells .gt_row{
     border-bottom-style: none;
    }")
```

# `tab_options(gt, options)`

## Borders

All borders have three associated arguments: `.color`, `.width`, and `.style`. These are (almost) all the borders you can target.
```{r tb_a_df}

tb_a1 <- c("", "table_body.vlines", "", "", "table_body.hlines", "")
tb_a2 <- c("", "", "", "", "", "")
tb_a3 <- c("", "", "", "", "", "")
tb_a4 <- c("", "", "", "", "", "")

tb_a <- tibble(tb_a1, tb_a2, tb_a3, tb_a4)
```

```{r tb_a_gt}
#| results: asis

tb_a %>% 
  gt(id = "two", rowname_col = "tb_a4") %>% 
  tab_header(title = html("<div style=\"text-align: right;color: #f764de;\">heading.border.lr</div> <div style=\"text-align: left;color: #30766a;\">heading.border.bottom</div>")) %>%
  tab_row_group(label = html("<div style=\"text-align: right; color: #ff8a8a; font-weight: bold;\">row_group.border.right</div><span style=\"color: #b349c5; font-weight: bold;\">row_group.border.bottom</span>"),
                rows = 1:3) %>% 
  tab_row_group(label = html("<div style=\"color: #b349c5; text-align: right; color: #79c1ef; font-weight: bold;\">row_group.border.top</div><span style=\"text-align: right;color: #bfcd8e;font-weight: bold;\">row_group.border.left</span>"),
                rows = 4:6) %>% 
  tab_footnote(footnote = html("<div style=\" text-align: right; color: #90ea66;font-weight: bold;\">footnotes.border.lr</div><span style=\"color: #fc99d5;\">footnotes.bottom.border</span>")) %>% 
  tab_source_note(source_note = html("<div style=\"text-align: right; color: #57ecc0; font-weight: bold; vertical-align: top;\">source_notes.border.lr</div><span style=\"color: #8033cb;\">source_note.bottom.border</span>")) %>% 
  summary_rows(columns = tb_a1,
               fns = list("<span style=\"color: #737fc9; font-weight: bold\">stub_border.color</span>" = ~ html("<span style=\"color: #a6cfc6;\">summary_row.border.color</span>")),
               formatter = fmt_markdown,
               groups = TRUE,
               missing_text = "") %>% 
  tab_style(
    locations = cells_body(columns = 1, rows = 2),
    style = cell_text(color = "#fb5471", align = "right")
  ) %>% 
  tab_style(
    locations = cells_body(columns = 1, rows = 5),
    style = cell_text(color = "#f79302")
  ) %>% 
  tab_style(
    locations = cells_column_labels(columns = 1),
    style = cell_text(color = "#af1680", weight = "bold")
  ) %>% 
  tab_style(
    locations = cells_title(),
    style = cell_text(weight = "bold")
  ) %>% 
  cols_label(
    tb_a1 = "column_labels.border.vline",
    tb_a2 = "",
    tb_a3 = ""
  ) %>% 
  tab_options(
    data_row.padding = "10px",
    data_row.padding.horizontal = "10px",
    table.font.weight = "bold",
    table.font.size = "14px",
    heading.title.font.size = "16px",
    source_notes.border.lr.color = "#57ecc0",
    source_notes.border.lr.style = "solid",
    source_notes.border.lr.width = "3px",
    source_notes.border.bottom.color = "#8033cb",
    source_notes.border.bottom.style = "solid",
    source_notes.border.bottom.width = "3px",
    summary_row.border.color = "#a6cfc6",
    summary_row.border.style = "solid",
    summary_row.border.width = "3px",
    footnotes.border.lr.color = "#90ea66",
    footnotes.border.lr.style = "solid",
    footnotes.border.lr.width = "3px",
    row_group.border.top.color = "#79c1ef",
    row_group.border.top.style = "solid",
    row_group.border.top.width = "3px",
    row_group.border.bottom.color = "#b349c5",
    row_group.border.bottom.style = "solid",
    row_group.border.bottom.width = "3px",
    row_group.border.left.color = "#bfcd8e",
    row_group.border.left.style = "solid",
    row_group.border.left.width = "3px",
    row_group.border.right.color = "#ff8a8a",
    row_group.border.right.style = "solid",
    row_group.border.right.width = "3px",
    table_body.hlines.color = "#f79302",
    table_body.hlines.style = "solid",
    table_body.hlines.width = "3px",
    table_body.vlines.color = "#fb5471",
    table_body.vlines.style = "solid",
    table_body.vlines.width = "3px",
    stub.border.color = "#737fc9",
    stub.border.style = "solid",
    stub.border.width = "3px",
    heading.border.bottom.color = "#30766a",
    heading.border.bottom.style = "solid",
    heading.border.bottom.width = "3px",
    heading.border.lr.color = "#f764de",
    heading.border.lr.style = "solid",
    heading.border.lr.width = "3px",
    column_labels.vlines.color = "#af1680",
    column_labels.vlines.style = "solid",
    column_labels.vlines.width = "3px",
    footnotes.border.bottom.color = "#fc99d5",
    footnotes.border.bottom.style = "solid",
    footnotes.border.bottom.width = "3px"
  ) %>% as_raw_html()
```

```{r tb_b_df}

tb_b1 <- c("", "", "", "", "table.border.right", "")
tb_b2 <- c("", "table.border.left", "", "", "", "")

tb_b <- tibble(tb_b1, tb_b2) 
```

```{r tb_b_gt}
#| results: asis
tb_b %>% 
  gt(id = "two", rowname_col = "tb_b2") %>% 
  tab_style(
    locations = cells_body(),
    style = cell_text(align = "right", color = "#5ac7dc", weight = "bold") 
  ) %>% 
  tab_style(
    locations = cells_stub(),
    style = cell_text(color = "#fc7086", weight = "bold")
  ) %>% 
  tab_stubhead(
    label = html("<div style=\"color: #d16dbe; font-weight: bold;\">column_labels.border.bottom</div>")
  ) %>% 
  cols_label(
    tb_b1 = html("<div style=\"color: #74de58; text-align: right; height: 30px; font-weight: bold;\">column_labels.border.lr</div>")
  ) %>% 
  tab_header(
    title = html("<div style=\"text-align: left;color: #f79302; font-weight: bold;\">table.border.top</div><div style=\"text-align: right;color: #f1d438; font-weight: bold;\">column_labels.border.top</div>")
  ) %>%
  grand_summary_rows(
    columns = 1,
    fns = list(" " = ~html("<div style=\"vertical-align: top; color: #4e66b6; height: 30px; align: center;\">grand_summary_row.border</div>")),
    formatter = fmt_markdown,
    missing_text = ""
  ) %>%
  tab_footnote(
    footnote = html("<div style=\"text-align: right; color: #54a32f; font-weight: bold;\">table_body.border.bottom</div><span style=\"color: #6c135a; font-weight: bold;\">table.border.bottom</span>")
  ) %>% 
  tab_options(
    data_row.padding = "8px",
    grand_summary_row.padding = "0px",
    table.font.weight = "bold",
    table.font.size = "14px",
    source_notes.border.lr.color = "#57ecc0",
    source_notes.border.lr.width = "3px",
    source_notes.border.lr.style = "solid",
    source_notes.border.bottom.style = "solid",
    source_notes.border.bottom.color = "#4e66b6",
    source_notes.border.bottom.width = "3px",
    grand_summary_row.border.color = "#4e66b6",
    table_body.border.bottom.color = "#54a32f",
    table_body.border.bottom.style = "solid",
    table_body.border.bottom.width = "3px",
    table_body.hlines.color = "#f79302",
    table_body.hlines.style = "none",
    table_body.hlines.width = "3px",
    table_body.border.top.color = "#1d866d",
    table_body.border.top.style = "solid",
    table_body.border.top.width = "3px",
    stub.border.color = "#737fc9",
    stub.border.style = "none",
    stub.border.width = "3px",
    table.border.top.color = "#f79302",
    table.border.top.style = "solid",
    table.border.top.width = "3px",
    table.border.bottom.color = "#6c135a",
    table.border.bottom.style = "solid",
    table.border.bottom.width = "3px",
    table.border.right.color = "#5ac7dc",
    table.border.right.style = "solid",
    table.border.right.width = "3px",
    table.border.left.color = "#fc7086",
    table.border.left.style = "solid",
    table.border.left.width = "3px",
    column_labels.border.top.color = "#f1d438",
    column_labels.border.top.style = "solid",
    column_labels.border.top.width = "3px",
    column_labels.border.bottom.color = "#d16dbe",
    column_labels.border.bottom.style = "solid",
    column_labels.border.bottom.width = "3px",
    column_labels.border.lr.color = "#74de58",
    column_labels.border.lr.style = "solid",
    column_labels.border.lr.width = "3px"
  ) %>% as_raw_html()
```

There's one missing: `table_body.border.top`. It shares space with `row_group.border.top` in the first table and `column_lables.border.bottom` in the second table. You'll only need to use it when you don't have column labels or row groups.

### Which Border Wins?

Scenario: You set the color for `table.border.bottom.color`, but it's still gray. But you find if you set `table.border.bottom.width` at 3px, suddenly it _is_ the color you set.

There is logic to this - the rules for how CSS handles border conflict. Every cell actually has 4 borders. They're almost always collapsed because separate borders are ugly. When they collapse, CSS decides which one matters the most. 

```{r}
border_fight <- gtcars %>% 
  select(1:3) %>% 
  slice(1:4) %>% 
  gt(id = "borders") %>% 
  tab_options(column_labels.border.top.style = "hidden",
              table_body.border.bottom.style = "hidden",
              table_body.hlines.style = "none")
```

`column_labels.border.bottom` and `table_body.border.top` share the same border space so they can be an example here. 

If we set a color for each of them, only one of them will show. Both of those options were rendered by `gt` in HTML file, but CSS prioritizes one of them.
```{r}
#| column: margin
#| echo: true

border_fight %>% 
  tab_options(
    column_labels.border.bottom.color = green,
    table_body.border.top.color = peach
  ) %>% 
  as_raw_html()
```

Here are the rules, tailored for `gt` table-making:

The style "hidden" beats everything - if any of the borders are "hidden", none of the borders will show.
```{r}
#| column: margin
#| echo: true

border_fight %>% 
  tab_options(
    column_labels.border.bottom.color = green,
    column_labels.border.bottom.style = "hidden",
    column_labels.border.bottom.width = "2px",
    table_body.border.top.color = peach,
    table_body.border.top.style = "solid",
    table_body.border.top.width = "2px"
  ) %>% 
  as_raw_html()
```

The "none" style hides a border but _doesn't_ affect any others.

```{r}
#| column: margin
#| echo: true

border_fight %>% 
  tab_options(
    column_labels.border.bottom.color = green,
    column_labels.border.bottom.style = "none",
    column_labels.border.bottom.width = "2px",
    table_body.border.top.color = peach,
    table_body.border.top.style = "solid",
    table_body.border.top.width = "2px"
  ) %>% 
  as_raw_html()
```

Wider borders win.

```{r}
#| column: margin
#| echo: true

border_fight %>% 
  tab_options(
    column_labels.border.bottom.color = green,
    column_labels.border.bottom.style = "solid",
    column_labels.border.bottom.width = "2px",
    table_body.border.top.color = peach,
    table_body.border.top.style = "solid",
    table_body.border.top.width = "3px"
  ) %>% 
  as_raw_html()
```

Then it goes to style in the order: "double", "solid", "dashed", "dotted".

```{r}
#| column: margin
#| echo: true

border_fight %>% 
  tab_options(
    column_labels.border.bottom.color = green,
    column_labels.border.bottom.style = "solid",
    column_labels.border.bottom.width = "2px",
    table_body.border.top.color = peach,
    table_body.border.top.style = "double",
    table_body.border.top.width = "2px"
  ) %>% 
  as_raw_html()
```

If the only difference is color, then border that will show is the one associated with, in order of priority: cell, row, table part (header, body, or footer), then table. 

```{r}
#| column: margin
#| echo: true

border_fight %>% 
  tab_options(
    column_labels.border.bottom.color = green,
    column_labels.border.bottom.style = "solid",
    column_labels.border.bottom.width = "2px",
    table_body.border.top.color = peach,
    table_body.border.top.style = "solid",
    table_body.border.top.width = "2px"
  ) %>% 
  as_raw_html()
```

If you were writing the CSS for an HTML table from scratch, this wouldn't matter as much. But `gt` makes things easier by building in reasonable defaults, which means that occasionally things might not show up as you think they will. There is one surefire way to avoid any of this though, which is to set all your borders at >2px.

## More options for `tab_options`

```{r opts_df}
#| message: false
opts <- read_csv("opts.csv", col_names = c("opts"))

opts <- opts %>% 
  mutate(opts = str_remove(opts, " = NULL,")) %>% 
  mutate(cat = case_when(str_detect(opts, "horizontal") ~ ".padding.horizontal",
                         str_detect(opts, "padding") ~ ".padding",
                         str_detect(opts, "background") ~ ".background.color",
                         str_detect(opts, "size") ~ ".font.size",
                         str_detect(opts, "font\\.weight") ~ ".font.weight",
                         str_detect(opts, "transform") ~ ".text_transform")) %>% 
  mutate(opts = case_when(str_detect(opts, "horizontal") ~ str_remove(opts, ".padding.horizontal"),
                          str_detect(opts, "padding") ~ str_remove(opts, ".padding"),
                          str_detect(opts, "background") ~ str_remove(opts, ".background.color"),
                          str_detect(opts, "size") ~ str_remove(opts, ".font.size"),
                          str_detect(opts, "font\\.weight") ~ str_remove(opts, ".font.weight"),
                          str_detect(opts, "transform") ~ str_remove(opts, ".text_transform"))) %>% 
  filter(!is.na(cat)) %>% 
  add_column(x = "") %>% 
  arrange(cat) %>% 
  mutate(grp = case_when(str_detect(cat, "back|text") ~ 1,
                         str_detect(cat, "font") ~ 2,
                         TRUE ~ 3))
```

```{r opts_gt}

opts_list <- opts %>% 
  group_by(grp) %>% 
  group_split() 

gt_map <- function(x) {
  x %>% 
    select(-grp) %>% 
    group_by(cat) %>% 
    gt(id = "options") %>% 
    opt_table_font(
      font = google_font("Roboto")
    ) %>% 
    cols_width(
      opts ~ "180px",
      x ~ "100px"
    ) %>% 
    tab_style(
      locations = cells_row_groups(),
      style = cell_text(align = "right")
    ) %>% 
    tab_style(
      locations = cells_body(columns = x),
      style = cell_borders(sides = "bottom", style = "hidden")
    ) %>% 
    tab_options(
      table.font.size = "14px",
      data_row.padding = "5px",
      row_group.padding.horizontal = "15px"
    ) %>% 
    cols_label(
      opts = "Table Part",
      x = "Attribute"
    ) %>% 
    tab_options(
      column_labels.border.top.color = purple,
      table.border.top.color = purple,
      row_group.border.bottom.color = green,
      row_group.border.top.color = green,
      table_body.border.bottom.color = purple,
      table_body.hlines.color = peach
    ) %>% 
    opt_css(
    css = "
    #options .gt_row {
    border-bottom-style: none;
    }"
  )
}

opts_gts <- opts_list %>% 
  map(~gt_map(.))

```

```{r}
#| column: body-outset
#| layout-nrow: 1
#| results: asis

pluck(opts_gts, 1)
pluck(opts_gts, 2)
pluck(opts_gts, 3)
```

